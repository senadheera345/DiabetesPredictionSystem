import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import seaborn as sns

# Load your dataset
df = pd.read_csv('D:/SLIIT/Y3S2/FDM/project/diabetes_prediction_dataset.csv')

# HEADINGS
st.title('Diabetes Checkup')
st.sidebar.header('Patient Data')
st.subheader('Training Data Stats')
st.write(df.describe())

# X AND Y DATA
x = df.drop(['diabetes'], axis=1)
y = df['diabetes']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

# FUNCTION
def user_report():
    age = st.sidebar.slider('Age', 3, 88, 33)
    bmi = st.sidebar.slider('BMI', 0.0, 67.0, 20.0)
    gender = st.sidebar.radio('Gender', ('Male', 'Female', 'Other'))
    hypertension = st.sidebar.radio('Hypertension', ('Yes', 'No'))
    heart_disease = st.sidebar.radio('Heart Disease', ('Yes', 'No'))
    smoking_history = st.sidebar.radio('Smoking History', ('Never', 'No Info', 'Current', 'Former'))
    hba1c_level = st.sidebar.slider('HbA1c Level', 0.0, 10.0, 5.0)
    blood_glucose_level = st.sidebar.slider('Blood Glucose Level', 0, 300, 100)

    # Map categorical inputs to numerical values based on your dataset
    gender_mapping = {'Male': 0, 'Female': 1, 'Other': 2}
    hypertension_mapping = {'Yes': 1, 'No': 0}
    heart_disease_mapping = {'Yes': 1, 'No': 0}
    smoking_history_mapping = {'Never': 0, 'No Info': 1, 'Current': 2, 'Former': 3}

    user_report_data = {
        'age': age,
        'bmi': bmi,
        'gender': gender_mapping[gender],
        'hypertension': hypertension_mapping[hypertension],
        'heart_disease': heart_disease_mapping[heart_disease],
        'smoking_history': smoking_history_mapping[smoking_history],
        'HbA1c_level': hba1c_level,
        'blood_glucose_level': blood_glucose_level,
    }
    report_data = pd.DataFrame(user_report_data, index=[0])
    return report_data

# PATIENT DATA
user_data = user_report()
st.subheader('Patient Data')
st.write(user_data)

# MODEL
rf = RandomForestClassifier()
rf.fit(x_train, y_train)
user_result = rf.predict(user_data)

# VISUALISATIONS
st.title('Visualised Patient Report')

# COLOR FUNCTION
if user_result[0] == 0:
    color = 'blue'
else:
    color = 'red'

# Add more visualizations based on your dataset features here.

# OUTPUT
st.subheader('Your Report: ')
output = 'Diabetic' if user_result[0] == 1 else 'Not Diabetic'
st.title(output)
st.subheader('Accuracy: ')
st.write(str(accuracy_score(y_test, rf.predict(x_test)) * 100) + '%')
